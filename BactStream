#!/usr/bin/env python3
import sys
import os
import subprocess
import shutil
from pathlib import Path
import argparse
import psutil

def get_resources(user_threads, user_memory):
    total_cores = os.cpu_count() or 2
    total_mem_gb = psutil.virtual_memory().available // (1024**3)
    threads = user_threads if user_threads and user_threads > 0 else total_cores
    memory = user_memory if user_memory and user_memory > 0 else total_mem_gb
    print(f"Detected resources: {total_cores} cores, {total_mem_gb}GB RAM")
    print(f"Using: {threads} threads, {memory}GB memory per tool")
    return threads, memory

def add_args(a):
    parser = argparse.ArgumentParser(description="Bacterial pipeline: reference annotation, assembly, annotation, variant calling, snpEff")
    parser.add_argument("--reference", "-r", help="Reference genome FASTA", required=True)
    parser.add_argument("--snpeff", "-s", default=False, help="Path to snpeff", required=False)
    parser.add_argument("--gatk", "-g", default=False, help="Path to gatk", required=False)
    parser.add_argument("--samtools", "-t", default=False, help="Path to samtools", required=False)
    parser.add_argument("--sra_ids", "-i", help="File with SRA IDs (one per line)", required=True)
    parser.add_argument("--trimgalore", "-T", default=False, help="Path to TrimGalore", required=False)
    parser.add_argument("--cutadapt", "-C", default=False, help="Path to Cutadapt", required=False)
    parser.add_argument("--spades", default="spades.py", help="Path to SPAdes", required=False)
    parser.add_argument("--bakta", default="bakta", help="Path to bakta", required=False)
    parser.add_argument("--baktadb", default="", help="Path to Bakta DB", required=True)
    parser.add_argument("--threads", type=int, default=0, help="Threads per tool (auto if 0)")
    parser.add_argument("--memory", type=int, default=0, help="Memory (GB) per tool (auto if 0)")
    return parser.parse_args(a)

def run_command(command):
    print(f"Running: {command}")
    subprocess.run(command, shell=True, check=True)

def find_executable(tool_name, custom_path):
    if custom_path and custom_path != "False":
        if custom_path.endswith(tool_name) or tool_name in custom_path:
            print(f"{tool_name} using: {custom_path}")
            return custom_path
        if not custom_path.endswith('/'):
            custom_path += '/'
        if Path(f"{custom_path}{tool_name}").exists():
            print(f"{tool_name} found at {custom_path}{tool_name}")
            return f"{custom_path}{tool_name}"
        print(f"{tool_name} path provided as: {custom_path}")
        return custom_path
    tool_path = shutil.which(tool_name)
    if tool_path:
        print(f"{tool_name} found in PATH: {tool_path}")
        return tool_path
    print(f"{tool_name} path not provided and not in PATH")
    sys.exit(1)

def get_completed_ids(sra_ids):
    return [sra_id for sra_id in sra_ids if Path(f"{sra_id}.bakta.gbk").exists()]

def build_snpEff(reference_file, bakta_path, baktadb, snpeffpath, threads, memory):
    gbk_out = Path("customref.gbk")
    if not gbk_out.exists():
        print("Annotating reference genome with Bakta...")
        run_command(f"{bakta_path} --db {baktadb} --output customref_bakta --prefix customref --threads {threads} {reference_file}")
        shutil.copyfile("customref_bakta/customref.gbk", "customref.gbk")
    else:
        print("Reference GBK already exists, skipping Bakta annotation.")

    snpeff_db_dir = f"{snpeffpath}data/custom-db/"
    if not Path(snpeff_db_dir).exists() or not Path(f"{snpeff_db_dir}genes.gbk").exists():
        print("Building custom snpEff database using Bakta GBK...")
        os.makedirs(snpeff_db_dir, exist_ok=True)
        shutil.copy("customref.gbk", f"{snpeff_db_dir}genes.gbk")
        config_path = f"{snpeffpath}snpEff.config"
        config_line = "custom-db.genome: custom-db\n"
        if Path(config_path).exists():
            with open(config_path, "r") as cf:
                if config_line not in cf.read():
                    with open(config_path, "a") as cfa:
                        cfa.write("\n" + config_line)
        else:
            with open(config_path, "w") as cfa:
                cfa.write(config_line)
        run_command(f"java -jar {snpeffpath}snpEff.jar build -genbank -c {config_path} -v custom-db")
    else:
        print("snpEff DB already exists, skipping build.")

if __name__ == "__main__":
    args = add_args(sys.argv[1:])
    threads, memory = get_resources(args.threads, args.memory)

    snpeffpath = find_executable("snpEff.jar", args.snpeff)
    gatkPATH = find_executable("gatk", args.gatk)
    samtoolsPATH = find_executable("samtools", args.samtools)
    trimgalore_path = find_executable("trim_galore", args.trimgalore)
    cutadapt_path = find_executable("cutadapt", args.cutadapt)
    spades_path = find_executable("spades.py", args.spades)
    bakta_path = find_executable("bakta", args.bakta)
    baktadb = args.baktadb

    build_snpEff(args.reference, bakta_path, baktadb, snpeffpath, threads, memory)

    run_command(f"bwa index {args.reference}")
    run_command(f"{samtoolsPATH} faidx {args.reference}")
    reference_dict = args.reference.replace(args.reference.split('.')[-1], 'dict')
    run_command(f"{gatkPATH} CreateSequenceDictionary -R {args.reference} -O {reference_dict}")

    with open(args.sra_ids, "r") as f:
        sra_ids = [line.strip() for line in f if line.strip()]
    completed_ids = get_completed_ids(sra_ids)
    remaining_ids = [s for s in sra_ids if s not in completed_ids]
    if not remaining_ids:
        print("All genomes have been processed.")
        sys.exit(0)

    print(f"Resuming from SRA ID: {remaining_ids[0]}")
    for sra_id in remaining_ids:
        try:
            print(f"Processing {sra_id}...")
            run_command(f"fasterq-dump --split-files {sra_id}")
            r1_file = f"{sra_id}_1.fastq"
            r2_file = f"{sra_id}_2.fastq"

            run_command(f"{trimgalore_path} --path_to_cutadapt {cutadapt_path} --paired --cores {threads} --gzip {r1_file} {r2_file}")
            trimmed_r1_file = f"{sra_id}_1_val_1.fq.gz"
            trimmed_r2_file = f"{sra_id}_2_val_2.fq.gz"

            spades_outdir = f"{sra_id}_spades_out"
            run_command(f"{spades_path} -1 {trimmed_r1_file} -2 {trimmed_r2_file} -o {spades_outdir} --threads {threads} --memory {memory}")
            assembled_fasta = f"{spades_outdir}/contigs.fasta"
            if not Path(assembled_fasta).exists():
                raise Exception(f"SPAdes failed: contigs.fasta not found for {sra_id}")
            named_fasta = f"{sra_id}.assembly.fasta"
            shutil.copyfile(assembled_fasta, named_fasta)

            run_command(f"{bakta_path} --db {baktadb} --output {sra_id}_bakta --prefix {sra_id} --threads {threads} {named_fasta}")
            bakta_gbk = f"{sra_id}_bakta/{sra_id}.gbk"
            bakta_gff = f"{sra_id}_bakta/{sra_id}.gff"
            if Path(bakta_gbk).exists():
                shutil.move(bakta_gbk, f"{sra_id}.bakta.gbk")
            if Path(bakta_gff).exists():
                shutil.move(bakta_gff, f"{sra_id}.bakta.gff")

            run_command(f'bwa mem -t {threads} -R "@RG\\tID:{sra_id}\\tPL:ILLUMINA\\tLB:lib1\\tSM:{sra_id}" {args.reference} {trimmed_r1_file} {trimmed_r2_file} > {sra_id}_aln.sam')
            run_command(f'{gatkPATH} SortSam -I {sra_id}_aln.sam -O {sra_id}_sorted.bam -SO coordinate')
            run_command(f'{gatkPATH} MarkDuplicates -I {sra_id}_sorted.bam -O {sra_id}_dedup.bam -M {sra_id}_metrics.txt')
            run_command(f'{gatkPATH} BuildBamIndex -I {sra_id}_dedup.bam')
            run_command(f'{gatkPATH} HaplotypeCaller -R {args.reference} -I {sra_id}_dedup.bam --native-pair-hmm-threads {threads} -ploidy 1 -O {sra_id}_raw_gVCF.vcf -ERC GVCF')
            run_command(f'{gatkPATH} GenotypeGVCFs -R {args.reference} --variant {sra_id}_raw_gVCF.vcf -O {sra_id}_raw.vcf')
            filtered_vcf = f"{sra_id}.filtered.vcf"
            run_command(f'{gatkPATH} VariantFiltration -R {args.reference} -V {sra_id}_raw.vcf -O {filtered_vcf} --filter-expression "QUAL < 30.0" --filter-name "LowQual"')

            annotated_vcf = f"{filtered_vcf.replace('.vcf', '.snpeff.vcf')}"
            run_command(f'java -jar -Xmx{memory}G {snpeffpath}snpEff.jar -c {snpeffpath}snpEff.config custom-db {filtered_vcf} > {annotated_vcf}')

            for temp_file in [
                r1_file, r2_file, trimmed_r1_file, trimmed_r2_file,
                f"{sra_id}_aln.sam", f"{sra_id}_sorted.bam", f"{sra_id}_metrics.txt",
                f"{sra_id}_dedup.bam", f"{sra_id}_dedup.bai", f"{sra_id}_raw_gVCF.vcf", f"{sra_id}_raw.vcf",
                named_fasta, spades_outdir, f"{sra_id}_bakta"
            ]:
                if Path(temp_file).is_file():
                    os.remove(temp_file)
                elif Path(temp_file).is_dir():
                    shutil.rmtree(temp_file)

            print(f"Completed {sra_id}: outputs = {annotated_vcf}, {sra_id}.bakta.gbk, {sra_id}.bakta.gff")
        except Exception as e:
            print(f"Error processing {sra_id}: {e}")
            continue

    print("\n\nAll tasks completed!\n\n")
